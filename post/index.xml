<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Taltalite&#39;s Notebook</title>
    <link>https://taltalite.github.io/post/</link>
    <description>Recent content in Posts on Taltalite&#39;s Notebook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2020. All rights reserved.</copyright>
    <lastBuildDate>Tue, 14 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://taltalite.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>gitlab开发参考流程</title>
      <link>https://taltalite.github.io/post/gitlab%E5%BC%80%E5%8F%91%E5%8F%82%E8%80%83%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://taltalite.github.io/post/gitlab%E5%BC%80%E5%8F%91%E5%8F%82%E8%80%83%E6%B5%81%E7%A8%8B/</guid>
      <description>介绍 项目开发 采用 feature branch workflow。
 首先， master 分支包含经过周密测试的最稳定代码，供比赛使用。 develop 分支基于 master 进行演化， 用于进行联合调试和联合测试。 在基于相对完整和稳定的 develop 分支上，开发者们可以构建日常最常用的特性分支（feature branch)，并在这些分支上完成开发工作。 开发完成后，分支下游的改动逐层上传，上游集成各模块并处理各模块的冲突后，下游又拉取(pull)并迭代开发。分支演化的一个简易的示例如下所示：  master├── hotfix│ ├── hotfix_issue_123└── develop 注意 在已有的稳定版本master分支上发现了未预料的BUG，可从hotfix分支上创建新的hotfix_issue_123分支。
 参考工作流 工作流简介 采用敏捷开发的基本工作流程，利用issue进行开发活动的管理。
 首先，开发一个新功能前必须先撰写issue，内容采用feature模板，并对issue设置合理的Label (模块归属，讨论，ToDo等) 和计划的Due date（参考Milestone，可不完全一致） issue划分的参考准则是在较短的时间内&amp;lt;4周可完成的功能，较大的issue作为Epic或者进行拆分 其次，每周讨论将合理的issue分配到Doing并由Maintainer分配developer处理该issue Maintainer或者一名负责该issue的developer从该issue创建merge request或创建branch，并选择正确的目标分支 (develop)  merge request 会直接创建一个WIP merge request，并且创建一个该issue的远端分支，WIP表示该merge request还未完成 create branch 会创建一个该issue的远端分支   所有处理该issue的developer在本地创建该issue的远端分支的跟踪分支，直接在该分支上进行工作；或者继续创建该跟踪分支的子分支，完成子分支工作后merge到该跟踪分支上 完成工作后，maintainer负责处理该issue的merge request  工作流示意   克隆项目:
git clone https://gitlab.com/xxx.git   从ISSUE创建工作分支</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://taltalite.github.io/post/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://taltalite.github.io/post/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/▾ images/logo.png should become
▾ &amp;lt;root&amp;gt;/▾ static/▾ images/logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://taltalite.github.io/post/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://taltalite.github.io/post/goisforlovers/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://taltalite.github.io/post/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://taltalite.github.io/post/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
  </channel>
</rss>